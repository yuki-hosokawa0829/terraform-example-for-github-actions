name: 'Terraform Plan/Apply'

on:
  push:
    branches:
    - main
    paths: ['terraform/aks/**', '.github/workflows/tf-aks-deploy.yml']

  pull_request:
    branches:
    - main
    paths: ['terraform/aks/**', '.github/workflows/tf-aks-deploy.yml']

#These environment variables are used by the terraform azure provider to setup OIDD authenticate. 
env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
  ARM_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}

defaults:
  run:
    working-directory: "./terraform/aks"

jobs:                
  terraform-apply:
    name: 'Terraform Apply'
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Version
      run: terraform --version

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      env:
        BACKEND_RESOURCE_GROUP_NAME: ${{ vars.BACKEND_RESOURCE_GROUP_NAME }}
        BACKEND_STORAGE_ACCOUNT_NAME: ${{ vars.BACKEND_STORAGE_ACCOUNT_NAME }}
        BACKEND_CONTAINER_NAME: ${{ vars.BACKEND_CONTAINER_NAME }}
        BACKEND_KEY: ${{ vars.BACKEND_KEY }}
        RESOURCE_GROUP_NAME: ${{ vars.RESOURCE_GROUP_NAME }}
        LOCATION: ${{ vars.LOCATION }}
        AKS_CLUSTER_NAME: ${{ vars.AKS_CLUSTER_NAME }}
      run: |
        terraform init \
        -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP_NAME" \
        -backend-config="storage_account_name=$BACKEND_STORAGE_ACCOUNT_NAME" \
        -backend-config="container_name=$BACKEND_CONTAINER_NAME" \
        -backend-config="key=$BACKEND_KEY" \
        -var resource_group_name=$RESOURCE_GROUP_NAME \
        -var location=$LOCATION \
        -var aks_cluster_name=$AKS_CLUSTER_NAME
    
    # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Terraform Format
      run: terraform fmt -recursive

    #Terraform Plan
    - name: Terraform Plan
      env:
        RESOURCE_GROUP_NAME: ${{ vars.RESOURCE_GROUP_NAME }}
        LOCATION: ${{ vars.LOCATION }}
        AKS_CLUSTER_NAME: ${{ vars.AKS_CLUSTER_NAME }}
      run: |
        terraform plan -no-color \
        -var resource_group_name=$RESOURCE_GROUP_NAME \
        -var location=$LOCATION \
        -var aks_cluster_name=$AKS_CLUSTER_NAME

    # Terraform Apply
    - name: Terraform Apply
      env:
        RESOURCE_GROUP_NAME: ${{ vars.RESOURCE_GROUP_NAME }}
        LOCATION: ${{ vars.LOCATION }}
        AKS_CLUSTER_NAME: ${{ vars.AKS_CLUSTER_NAME }}
      run: |
        terraform apply -auto-approve \
        -var resource_group_name=$RESOURCE_GROUP_NAME \
        -var location=$LOCATION \
        -var aks_cluster_name=$AKS_CLUSTER_NAME