name: 'Kubernetes Deploy'

on:
  push:
    branches:
    - main
    paths: ['manifest/**', '.github/workflows/tf-k8s-deploy.yml']

  pull_request:
    branches:
    - main
    paths: ['manifest/**', '.github/workflows/tf-k8s-deploy.yml']

env:
  manifest_path: './manifest'

permissions:
  id-token: write
  contents: read

jobs:
  deploy-container:
    name: 'Apply AKS manifest'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CONTAINER_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_AD_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      #- name: Edit Hosts File
      #  uses: azure/cli@v2
      #  with:
      #    azcliversion: latest
      #    inlineScript: |
      #      ls
      #      cd etc
      #      set FILE=hosts

      #      for /f "usebackq delims=" %%A in (`az aks show -n ${{ vars.AKS_CLUSTER_NAME }} -g ${{ vars.RESOURCE_GROUP_NAME }} --query privateFqdn`) do set FQDN=%%A
      #      for /f "usebackq delims=" %%A in (`az network private-dns record-set a show --name ${{ vars.AKS_CLUSTER_NAME }} --resource-group ${{ vars.RESOURCE_GROUP_NAME }} --zone-name privatelink.japaneast.azmk8s.io --query aRecords[0].ipv4Address`) do set IP=%%A

      #      set FQDN=%FQDN:"=%
      #      set IP=%IP:"=%

      #      set TEXT=%IP% %FQDN%

      #      findstr /v %FQDN% %FILE% > temp
      #      type temp> %FILE%
      #      del temp

      #      echo %TEXT%>> %FILE%

      - name: AKS Get Credential
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az aks get-credentials --admin --overwrite-existing \
            --resource-group ${{ vars.RESOURCE_GROUP_NAME }} \
            --name ${{ vars.AKS_CLUSTER_NAME }} \
            --file .kube/${{ vars.AKS_CLUSTER_NAME }}

      - name: Kubectl Apply
        run: |
          sudo kubectl apply -k ${{ env.manifest_path }} \
          --kubeconfig .kube/${{ vars.AKS_CLUSTER_NAME }}