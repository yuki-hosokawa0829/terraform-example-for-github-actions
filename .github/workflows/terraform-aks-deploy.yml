name: 'Terraform-AKS-Deploy'
concurrency: ${{ github.workflow }}-${{ github.ref }}-${{ github.run_number }}

on:
  push:
    branches:
    - main
    paths: ['terraform/aks/**', '.github/workflows/terraform-aks-deploy.yml']
  pull_request:
    paths: 'terraform/aks/**'

permissions:
  id-token: write
  contents: read

env:
  resource_group: 'ndsou-test-tfaks01'
  cluster_name: 'ndsou-test-tfaks01-cl'
  manifest_path: 'terraform/aks/manifest/aks-store-quickstart.yaml'

jobs:
  terraform:
    name: 'Deploy AKS Cluster'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      WORKING_DIR: terraform/aks
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Service Principal
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Format Terraform code to make sure that the configuration files adhere to the Terraform language style conventions
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check -recursive
      
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    # Validate the configuration files in a Terraform working directory
    - name: Terraform Validate
      id: validate
      run: terraform validate

    # Generate and show an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan -out main.tfplan

    # Deploy the infrastructure by using the Azure CLI
    - name: Terraform Apply
      id: apply
      run: terraform apply -auto-approve main.tfplan

  build:
    name: 'Apply AKS manifest'
    needs: terraform
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code 
        uses: actions/checkout@v3

      - name: Azure login
        id: login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_AD_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_AD_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set AKS context
        id: set-context
        uses: azure/aks-set-context@v3
        with:
          resource-group: '${{ env.resource_group }}' 
          cluster-name: '${{ env.cluster_name }}'

      - name: Setup kubectl
        id: install-kubectl
        uses: azure/setup-kubectl@v3

      - name: Deploy to AKS
        id: deploy-aks
        uses: Azure/k8s-deploy@v4
        with:
          namespace: 'default'
          manifests: |
             ${{ env.manifest_path }}

  delete:
    name: 'Delete AKS Cluster'
    needs: [terraform, build]
    if: failure() && needs.build.result == 'failure'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      TF_VERSION: 1.6.6
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Service Principal
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Format Terraform code to make sure that the configuration files adhere to the Terraform language style conventions
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check -recursive
      
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    # Validate the configuration files in a Terraform working directory
    - name: Terraform Validate
      id: validate
      run: terraform validate

    # Generate and show an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan -out main.tfplan

    # DEstroy the infrastructure by using the Azure CLI
    - name: Terraform Destroy
      id: destroy
      run: terraform destroy -auto-approve main.tfplan
